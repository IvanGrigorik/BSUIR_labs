<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//RU">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<META HTTP-EQUIV="Content-Language" CONTENT="ru">

<title>Лабораторная работа</title>
<style type="text/css">
 body {font-family: Arial, sans-serif;}
 .c {font-family: "Courier New", Courier, monospace}
</style>

</HEAD><BODY>

<div align="justify">

<p>&nbsp;</p>
<div align="center">
<p><strong>ЛАБОРАТОРНАЯ РАБОТА №6</strong></p>
</div>
<p>&nbsp;</p>

<p>Цель: изучить методы обеспечения надежности виртуального соединения на примере TCP.</p>

<p>Лабораторная работа выполняется студентом индивидуально, на базе ПК, по варианту.</p>

<p>Задание на лабораторную работу может содержать следующие пункты:</p>

<p>1.&nbsp;Данная лабораторная работа может являться продолжением лабораторной работы №3, может выполняться "с нуля".</p>

<p>2.&nbsp;Написать коммуникационную программу, реализующую упрощенный вариант алгоритма TCP для надежной передачи сообщения по ненадежному каналу между двумя условными либо реальными пользовательскими станциями, с учетом следующих пунктов задания.</p>

<p>3.&nbsp;Программа должна соответствовать двунаправленной топологии point-to-point.</p>

<p>4.&nbsp; Как станции -- передатчику сообщения, так и станции -- приемнику сообщения, должна соответствовать пара подпрограмм -- передающая и принимающая. Плюс программа должна включать эмулирующую ненадежность канала подпрограмму.</p>

<p>5.&nbsp;Программа должна иметь отдельное окно ввода для передаваемого текстового сообщения.</p>

<p>6.&nbsp;Программа должна иметь отдельное окно вывода для принимаемого текстового сообщения.</p>

<p>7.&nbsp;На станции -- передатчике сообщения это сообщение должно разбиваться и затем передаваться побайтно либо, при "дописывании" предыдущих лабораторных работ, попакетно. Алгоритм TCP требует создания либо модификации структуры пакета.</p>

<p>8.&nbsp;Подпрограмма -- эмулятор ненадежности канала должна создавать проблемы, аналогичные проблемам в реальной сети передачи данных, то есть случайно удалять и перепутывать пакеты.</p>

<p>9.&nbsp;Программа должна гарантировать доставку всех пакетов.</p>

<p>10.&nbsp;Программа должна гарантировать правильную очередность байтов в принятом сообщении за счет введения в структуру пакета SNs и ANs (нумеровать можно как байты, так и пакеты).</p>

<p>11.&nbsp;Программа должна иметь отдельное отладочное окно. В этом окне, по крайней мере, должны отражаться значения SNs и ANs в передаваемых пакетах.</p>

<p>12.&nbsp;Программа должна работать "циклически".</p>

<p>13.&nbsp;Реализовать так же одно из усовершенствований протокола TCP (согласно варианту, например, медленный старт).</p>

<p>Теоретические основы изложены в лекционном материале и рекомендованной литературе.</p>

</div>

</BODY>
</HTML>
